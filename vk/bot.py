import json
import re
from random import randrange, choice

import vk_api.exceptions
from vk_api.longpoll import VkLongPoll, VkEventType

from core.config import settings
from db.crud import db
from vk.api import VkUserSession
from vk.assets import calculate_age, keyboard_gen
from vk.base import VKBase


class VkBot(VKBase):
    def __init__(self, access_token, version=settings.VK_API_VERSION):
        super().__init__(access_token, version)
        self.long_poll = VkLongPoll(self.vk)
        self.text_commands = settings.bot_commands
        self.stack_founded_profiles = dict()
        self.user_sessions = dict()

    def start(self):
        for event in self.long_poll.listen():
            if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–∫–µ–Ω–∞
                vk_user_token = self.check_user_registration(event)
                if vk_user_token:
                    user_session = self.get_or_create_session(vk_user_token, event)
                    self.request_handler(user_session, event)

    def get_or_create_session(self, vk_user_token, event):
        # —Ç—É—Ç event.user_id –∏ –µ—Å—Ç—å current_user['id'], —Ç–æ –º–æ–∂–Ω–æ –ª–∏—à–Ω–∏–π —Ä–∞–∑ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å get_users_info
        current_user = self.get_users_info(user_ids=event.user_id)[0]
        if current_user['id'] in self.user_sessions:
            return self.user_sessions.get(current_user['id'])
        new_session = VkUserSession(user_access_token=vk_user_token)
        # –ú–µ—Ç–æ–¥ get.user —Å —Ç–æ–∫–µ–Ω–æ–º –≥—Ä—É–ø–ø—ã –Ω–µ –≤–æ–∑—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ—ç—Ç–æ–º—É –±–µ—Ä–µ–º –µ—â–µ —Ä–∞–∑ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_user = new_session.get_users_info(user_ids=event.user_id)[0]
        # –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Å—é–¥–∞ –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç—è–Ω—É—Ç—å –∏–∑ text_handler
        # current_user = self.check_user_info(event, current_user, new_session)
        # –∏ —É–∂–µ –≥–æ—Ç–æ–≤–µ–Ω—å–∫–æ–≥–æ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –±–∞–∑—É
        new_session.set_db_user(db.get_or_create_user(current_user['id']))
        new_session.set_user(current_user)
        self.user_sessions[current_user['id']] = new_session
        return new_session

    def request_handler(self, user_session: VkUserSession, event):
        event_text = event.text.lower()
        if event_text in self.text_commands or 'setting' in event_text:
            if 'payload' in event.raw[6]:
                self.payload_handler(user_session, event)
            else:
                self.text_handler(user_session, event)
        else:
            self.send_msg(event.user_id, f'–ù–∞–ø–∏—à–∏—Ç–µ: "–ü—Ä–∏–≤–µ—Ç" –∏ —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –¥–ª—è –≤–∞—Å –ø–∞—Ä—É {event_text}')

    def text_handler(self, user_session: VkUserSession, event, next=None):
        if next:
            user_session.increase_pop()
        current_user = user_session.user
        current_user = self.check_user_info(event, current_user, user_session)
        current_user_bdate = current_user.get('bdate')
        if current_user_bdate:
            age_from = calculate_age(current_user_bdate) - 5 if current_user['sex'] == 2 else calculate_age(
                current_user_bdate)
            age_to = calculate_age(current_user_bdate) if current_user['sex'] == 2 else calculate_age(
                current_user_bdate) + 5

            if not self.stack_founded_profiles.get(current_user["id"]):
                # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ 1000, –µ—Å–ª–∏ –ø–æ –ø–µ—Ä–≤–æ–º—É —Å—Ç–µ–∫—É –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ,
                # —Ç–æ –¥–ª—è –Ω–æ–≤—ã—Ö search_users –º–æ–∂–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å —Å status=1,
                # –Ω–æ —Ç–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è status
                founded_profiles = user_session.search_users(
                    sex=current_user['sex'],
                    city_id=current_user['city']['id'],
                    age_from=age_from,
                    age_to=age_to
                )
                # –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ stack –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∏ —á—Å
                self.stack_founded_profiles[current_user['id']] = founded_profiles
            self.response_handler(user_session, event, current_user)

    def payload_handler(self, user_session: VkUserSession, event):
        command_obj = json.loads(event.payload)
        command = command_obj.get('command')
        founded_profile_id = command_obj.get("founded_profile")
        if command == 'like':
            is_added = self.add_to_favorites(user_session.db_user, founded_profile_id)
            if is_added:
                self.send_msg(send_id=event.user_id,
                              message=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id{founded_profile_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ ‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ')
            self.text_handler(user_session, event)
        elif command == 'dislike':
            is_added = self.add_to_blacklist(user_session.db_user, founded_profile_id)
            if is_added:
                self.send_msg(send_id=event.user_id,
                              message=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id{founded_profile_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ üëé –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫')
            self.text_handler(user_session, event)
        elif command == 'next':
            self.text_handler(user_session, event, next=True)
        elif command == 'favorites':
            fav = self.get_favorites(user_session.db_user)
            self.send_msg(send_id=event.user_id, message=fav)
        elif command == 'exit':
            self.send_msg(send_id=event.user_id, message='üëã–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –µ—â–µ')

    def response_handler(self, user_session, event, current_user):

        message_pack = settings.male_msgs if current_user['sex'] == 2 else settings.female_msgs
        print(self.stack_founded_profiles[current_user['id']][0]['id'])
        while True:
            profile = self.stack_founded_profiles[current_user['id']].pop(user_session.pop)
            if self.already_viewed(user_session.db_user, profile['id']):
                continue
            break

        message = f'{choice(message_pack)} \n' \
                  f'{profile.get("first_name")} {profile.get("last_name")}.\n' \
                  f'–°—Å—ã–ª–∫–∞: https://vk.com/{profile.get("domain")}'
        photo_attachments = user_session.get_photos(owner_id=profile['id'])
        if photo_attachments is None:
            message += f'\n–§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        vk_keyboard = keyboard_gen(event, profile)
        self.send_msg(send_id=event.user_id, message=message, attachments=photo_attachments,
                      keyboard=vk_keyboard)

    def send_msg(self, send_id, message, attachments=None, keyboard=None, payload=None):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ messages.send
        :param send_id: vk id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
        :param message: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        :param attachments: —Å—Ç—Ä–æ–∫–∞ —Å —Ñ–æ—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        :param keyboard: –æ–±—ä–µ–∫—Ç –∫–Ω–æ–ø–æ–∫ VkKeyboard
        :return: None
        """
        try:
            self.vk.method('messages.send', {'user_id': send_id,
                                             'message': message,
                                             'random_id': randrange(10 ** 7),
                                             'attachment': attachments,
                                             'keyboard': keyboard,
                                             'payload': payload
                                             })
        except vk_api.exceptions.ApiError as error:
            print('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ', error)

    def add_to_favorites(self, db_user, profile_vk_id: int = None):
        # –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
        # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –≤ get_favorites
        # –ø–∞—Ä–∞–º–µ—Ç—Ä favor - boolean –µ—Å–ª–∏ like —Ç–æ True, –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ - False
        if db_user and profile_vk_id:
            return db.add_favorite(db_user, profile_vk_id)
        raise ValueError('Problem with vk_id')

    def add_to_blacklist(self, db_user, profile_vk_id: int = None):
        if db_user and profile_vk_id:
            return db.add_to_blacklist(db_user, profile_vk_id)
        raise ValueError('Problem with vk_id')

    def get_favorites(self, user_id):
        '''
        –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ favorites —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –§–ò–û -- –í–æ–∑—Ä–∞—Å—Ç -- –ì–æ—Ä–æ–¥ -- –°—Å—ã–ª–∫–∞
        :return:
        '''
        favorites = db.get_favorites(user_id)
        if not favorites:
            return '–ò–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç—É'
        verbose_favorites = '–¢–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ: \n'
        for i, profile in enumerate(favorites, start=1):
            verbose_favorites += f'{i}. {str(profile.profile_id)}\n'
        return verbose_favorites

    def already_viewed(self, db_user, profile_id) -> bool:
        '''
        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–∏—Ö –ª–∏–±–æ —Å–ø–∏—Å–∫–∞—Ö —É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param user:
        :return:
        '''
        return db.exist_in_user_lists(db_user, profile_id)

    def add_new_user(self, user) -> bool:
        '''
        –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –æ–Ω –≤ –ë–î,
        –î–æ–±–∞–≤–ª—è–µ—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –∏–Ω–∞—á–µ False
        '''

        user_vk_id = user.get('id')
        return db.get_or_create_user(user_vk_id)

    def check_user_info(self, event, current_user, vk_session):
        if not current_user.get('bdate'):
            if 'setting' in event.text:
                setting = re.findall(r'-\s*(\d{2}.\d{2}.\d{4})\s*-\s*(\S+)', event.text)[0]
                current_user['bdate'] = setting[0]
                current_user['city'] = vk_session.get_city(setting[1])
                msg = f'–ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n ' \
                      f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è - {current_user["bdate"]},\n ' \
                      f'–ì–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞ - {current_user["city"]["title"]}'
                payload = '{\"command\":\"setting\"}'
                self.send_msg(send_id=event.user_id, message=msg, payload=payload)
            else:
                msg = '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüòî\n' \
                      '–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É setting —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –≥–æ—Ä–æ–¥–∞.\n' \
                      '–ü—Ä–∏–º–µ—Ä, setting - 01.01.1990 - –ú–æ—Å–∫–≤–∞'
                self.send_msg(send_id=event.user_id, message=msg)

        return current_user

    def check_user_registration(self, event):
        if 'token' in event.text:
            access_token = re.findall(r'(vk1[^&]+)', event.text)[0]
            print(access_token)
            msg = '–ü–æ–ª—É—á–µ–Ω access_token üíæ '
            payload = '{\"command\":\"access_token\"}'
            self.send_msg(send_id=event.user_id, message=msg, payload=payload)
            # –î–æ–±–∞–≤–∏—Ç—å –≤ –ë–î User —Ç–æ–∫–µ–Ω –∏ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è / –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            # —Ç.–µ. –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î –ø–æ event.user_id –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î —Å token,
            # –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º token
        else:
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î –ø–æ event.user_id –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–∏–ª –ø–æ–¥—Å—Ç–∞–≤–∫—É settings.VK_USER_TOKEN, –∫–æ–≥–¥–∞ –ë–î –¥–æ–¥–µ–ª–∞–µ–º, —Ç–æ —É–±–µ—Ä–µ–º
            token = settings.VK_USER_TOKEN
            # token = False
            if not token:
                msg = '–ü—Ä–∏–≤–µ—Çü§ö\n' \
                      '–î–ª—è —Ä–∞–±–æ—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º access_token –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚öôÔ∏è\n' \
                      '–ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ üëá\n' \
                      f'https://oauth.vk.com/authorize?client_id={settings.VK_CLIENT_ID}&scope=65536&response_type=token\n' \
                      '–ü–æ—è–≤–∏—Ç—Å—è –æ–∫–Ω–æ —Å –∑–∞–ø—Ä–æ—Å–æ–º –¥–æ—Å—Ç—É–ø–∞ üëâ –Ω–∞–∂–∏–º–∞–µ–º "–†–∞–∑—Ä–µ—à–∏—Ç—å"\n' \
                      '–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ë—Ä–∞—É–∑–µ—Ä –ø–µ—Ä–µ–∫–∏–Ω–µ—Ç –Ω–∞ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É\n' \
                      '–ò–∑ —ç—Ç–æ–π —Å—Å—ã–ª–∫–∏ –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å access_token –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π token\n' \
                      '–ü—Ä–∏–º–µ—Ä, token - vk1.a.************************************'
                self.send_msg(send_id=event.user_id, message=msg)
            return token
